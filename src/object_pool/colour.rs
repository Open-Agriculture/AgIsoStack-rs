// Copyright 2024 Raven Industries inc
#[derive(Debug, Clone, Copy, PartialEq)]
#[non_exhaustive]
pub struct Colour {
    pub id: u8,
    pub a: u8,
    pub r: u8,
    pub g: u8,
    pub b: u8,
}

impl Colour {
    pub fn new_by_id(id: u8) -> Self {
        Colour::COLOUR_PALETTE[id as usize]
    }

    pub fn new_by_rgb(r: u8, g: u8, b: u8) -> Self {
        for colour in Colour::COLOUR_PALETTE.iter() {
            if colour.r == r && colour.g == g && colour.b == b {
                return *colour;
            }
        }

        Colour::BLACK
    }

    pub fn new_by_rgba(r: u8, g: u8, b: u8, _a: u8) -> Self {
        Self::new_by_rgb(r, g, b)
    }

    pub fn as_rgb(&self) -> [u8; 3] {
        [self.r, self.g, self.b]
    }

    pub fn as_rgba(&self) -> [u8; 4] {
        [self.r, self.g, self.b, self.a]
    }

    pub const BLACK: Colour = Colour::COLOUR_PALETTE[0];
    pub const WHITE: Colour = Colour::COLOUR_PALETTE[1];
    pub const GREEN: Colour = Colour::COLOUR_PALETTE[2];
    pub const TEAL: Colour = Colour::COLOUR_PALETTE[3];
    pub const MAROON: Colour = Colour::COLOUR_PALETTE[4];
    pub const PURPLE: Colour = Colour::COLOUR_PALETTE[5];
    pub const OLIVE: Colour = Colour::COLOUR_PALETTE[6];
    pub const SILVER: Colour = Colour::COLOUR_PALETTE[7];
    pub const GREY: Colour = Colour::COLOUR_PALETTE[8];
    pub const BLUE: Colour = Colour::COLOUR_PALETTE[9];
    pub const LIME: Colour = Colour::COLOUR_PALETTE[10];
    pub const CYAN: Colour = Colour::COLOUR_PALETTE[11];
    pub const RED: Colour = Colour::COLOUR_PALETTE[12];
    pub const MAGENTA: Colour = Colour::COLOUR_PALETTE[13];
    pub const YELLOW: Colour = Colour::COLOUR_PALETTE[14];
    pub const NAVY: Colour = Colour::COLOUR_PALETTE[15];

    #[rustfmt::skip] // Skip formatting the lines
    pub const COLOUR_PALETTE: [Colour; 256] = [
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 0 },
        Colour { r: 0xFF, g: 0xFF, b: 0xFF, a: 0xFF, id: 1 },
        Colour { r: 0x00, g: 0x99, b: 0x00, a: 0xFF, id: 2 },
        Colour { r: 0x00, g: 0x99, b: 0x99, a: 0xFF, id: 3 },
        Colour { r: 0x99, g: 0x00, b: 0x00, a: 0xFF, id: 4 },
        Colour { r: 0x99, g: 0x00, b: 0x99, a: 0xFF, id: 5 },
        Colour { r: 0x99, g: 0x99, b: 0x00, a: 0xFF, id: 6 },
        Colour { r: 0xCC, g: 0xCC, b: 0xCC, a: 0xFF, id: 7 },
        Colour { r: 0x99, g: 0x99, b: 0x99, a: 0xFF, id: 8 },
        Colour { r: 0x00, g: 0x00, b: 0xFF, a: 0xFF, id: 9 },
        Colour { r: 0x00, g: 0xFF, b: 0x00, a: 0xFF, id: 10 },
        Colour { r: 0x00, g: 0xFF, b: 0xFF, a: 0xFF, id: 11 },
        Colour { r: 0xFF, g: 0x00, b: 0x00, a: 0xFF, id: 12 },
        Colour { r: 0xFF, g: 0x00, b: 0xFF, a: 0xFF, id: 13 },
        Colour { r: 0xFF, g: 0xFF, b: 0x00, a: 0xFF, id: 14 },
        Colour { r: 0x00, g: 0x00, b: 0x99, a: 0xFF, id: 15 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 16 },
        Colour { r: 0x00, g: 0x00, b: 0x33, a: 0xFF, id: 17 },
        Colour { r: 0x00, g: 0x00, b: 0x66, a: 0xFF, id: 18 },
        Colour { r: 0x00, g: 0x00, b: 0x99, a: 0xFF, id: 19 },
        Colour { r: 0x00, g: 0x00, b: 0xCC, a: 0xFF, id: 20 },
        Colour { r: 0x00, g: 0x00, b: 0xFF, a: 0xFF, id: 21 },
        Colour { r: 0x00, g: 0x33, b: 0x00, a: 0xFF, id: 22 },
        Colour { r: 0x00, g: 0x33, b: 0x33, a: 0xFF, id: 23 },
        Colour { r: 0x00, g: 0x33, b: 0x66, a: 0xFF, id: 24 },
        Colour { r: 0x00, g: 0x33, b: 0x99, a: 0xFF, id: 25 },
        Colour { r: 0x00, g: 0x33, b: 0xCC, a: 0xFF, id: 26 },
        Colour { r: 0x00, g: 0x33, b: 0xFF, a: 0xFF, id: 27 },
        Colour { r: 0x00, g: 0x66, b: 0x00, a: 0xFF, id: 28 },
        Colour { r: 0x00, g: 0x66, b: 0x33, a: 0xFF, id: 29 },
        Colour { r: 0x00, g: 0x66, b: 0x66, a: 0xFF, id: 30 },
        Colour { r: 0x00, g: 0x66, b: 0x99, a: 0xFF, id: 31 },
        Colour { r: 0x00, g: 0x66, b: 0xCC, a: 0xFF, id: 32 },
        Colour { r: 0x00, g: 0x66, b: 0xFF, a: 0xFF, id: 33 },
        Colour { r: 0x00, g: 0x99, b: 0x00, a: 0xFF, id: 34 },
        Colour { r: 0x00, g: 0x99, b: 0x33, a: 0xFF, id: 35 },
        Colour { r: 0x00, g: 0x99, b: 0x66, a: 0xFF, id: 36 },
        Colour { r: 0x00, g: 0x99, b: 0x99, a: 0xFF, id: 37 },
        Colour { r: 0x00, g: 0x99, b: 0xCC, a: 0xFF, id: 38 },
        Colour { r: 0x00, g: 0x99, b: 0xFF, a: 0xFF, id: 39 },
        Colour { r: 0x00, g: 0xCC, b: 0x00, a: 0xFF, id: 40 },
        Colour { r: 0x00, g: 0xCC, b: 0x33, a: 0xFF, id: 41 },
        Colour { r: 0x00, g: 0xCC, b: 0x66, a: 0xFF, id: 42 },
        Colour { r: 0x00, g: 0xCC, b: 0x99, a: 0xFF, id: 43 },
        Colour { r: 0x00, g: 0xCC, b: 0xCC, a: 0xFF, id: 44 },
        Colour { r: 0x00, g: 0xCC, b: 0xFF, a: 0xFF, id: 45 },
        Colour { r: 0x00, g: 0xFF, b: 0x00, a: 0xFF, id: 46 },
        Colour { r: 0x00, g: 0xFF, b: 0x33, a: 0xFF, id: 47 },
        Colour { r: 0x00, g: 0xFF, b: 0x66, a: 0xFF, id: 48 },
        Colour { r: 0x00, g: 0xFF, b: 0x99, a: 0xFF, id: 49 },
        Colour { r: 0x00, g: 0xFF, b: 0xCC, a: 0xFF, id: 50 },
        Colour { r: 0x00, g: 0xFF, b: 0xFF, a: 0xFF, id: 51 },
        Colour { r: 0x33, g: 0x00, b: 0x00, a: 0xFF, id: 52 },
        Colour { r: 0x33, g: 0x00, b: 0x33, a: 0xFF, id: 53 },
        Colour { r: 0x33, g: 0x00, b: 0x66, a: 0xFF, id: 54 },
        Colour { r: 0x33, g: 0x00, b: 0x99, a: 0xFF, id: 55 },
        Colour { r: 0x33, g: 0x00, b: 0xCC, a: 0xFF, id: 56 },
        Colour { r: 0x33, g: 0x00, b: 0xFF, a: 0xFF, id: 57 },
        Colour { r: 0x33, g: 0x33, b: 0x00, a: 0xFF, id: 58 },
        Colour { r: 0x33, g: 0x33, b: 0x33, a: 0xFF, id: 59 },
        Colour { r: 0x33, g: 0x33, b: 0x66, a: 0xFF, id: 60 },
        Colour { r: 0x33, g: 0x33, b: 0x99, a: 0xFF, id: 61 },
        Colour { r: 0x33, g: 0x33, b: 0xCC, a: 0xFF, id: 62 },
        Colour { r: 0x33, g: 0x33, b: 0xFF, a: 0xFF, id: 63 },
        Colour { r: 0x33, g: 0x66, b: 0x00, a: 0xFF, id: 64 },
        Colour { r: 0x33, g: 0x66, b: 0x33, a: 0xFF, id: 65 },
        Colour { r: 0x33, g: 0x66, b: 0x66, a: 0xFF, id: 66 },
        Colour { r: 0x33, g: 0x66, b: 0x99, a: 0xFF, id: 67 },
        Colour { r: 0x33, g: 0x66, b: 0xCC, a: 0xFF, id: 68 },
        Colour { r: 0x33, g: 0x66, b: 0xFF, a: 0xFF, id: 69 },
        Colour { r: 0x33, g: 0x99, b: 0x00, a: 0xFF, id: 70 },
        Colour { r: 0x33, g: 0x99, b: 0x33, a: 0xFF, id: 71 },
        Colour { r: 0x33, g: 0x99, b: 0x66, a: 0xFF, id: 72 },
        Colour { r: 0x33, g: 0x99, b: 0x99, a: 0xFF, id: 73 },
        Colour { r: 0x33, g: 0x99, b: 0xCC, a: 0xFF, id: 74 },
        Colour { r: 0x33, g: 0x99, b: 0xFF, a: 0xFF, id: 75 },
        Colour { r: 0x33, g: 0xCC, b: 0x00, a: 0xFF, id: 76 },
        Colour { r: 0x33, g: 0xCC, b: 0x33, a: 0xFF, id: 77 },
        Colour { r: 0x33, g: 0xCC, b: 0x66, a: 0xFF, id: 78 },
        Colour { r: 0x33, g: 0xCC, b: 0x99, a: 0xFF, id: 79 },
        Colour { r: 0x33, g: 0xCC, b: 0xCC, a: 0xFF, id: 80 },
        Colour { r: 0x33, g: 0xCC, b: 0xFF, a: 0xFF, id: 81 },
        Colour { r: 0x33, g: 0xFF, b: 0x00, a: 0xFF, id: 82 },
        Colour { r: 0x33, g: 0xFF, b: 0x33, a: 0xFF, id: 83 },
        Colour { r: 0x33, g: 0xFF, b: 0x66, a: 0xFF, id: 84 },
        Colour { r: 0x33, g: 0xFF, b: 0x99, a: 0xFF, id: 85 },
        Colour { r: 0x33, g: 0xFF, b: 0xCC, a: 0xFF, id: 86 },
        Colour { r: 0x33, g: 0xFF, b: 0xFF, a: 0xFF, id: 87 },
        Colour { r: 0x66, g: 0x00, b: 0x00, a: 0xFF, id: 88 },
        Colour { r: 0x66, g: 0x00, b: 0x33, a: 0xFF, id: 89 },
        Colour { r: 0x66, g: 0x00, b: 0x66, a: 0xFF, id: 90 },
        Colour { r: 0x66, g: 0x00, b: 0x99, a: 0xFF, id: 91 },
        Colour { r: 0x66, g: 0x00, b: 0xCC, a: 0xFF, id: 92 },
        Colour { r: 0x66, g: 0x00, b: 0xFF, a: 0xFF, id: 93 },
        Colour { r: 0x66, g: 0x33, b: 0x00, a: 0xFF, id: 94 },
        Colour { r: 0x66, g: 0x33, b: 0x33, a: 0xFF, id: 95 },
        Colour { r: 0x66, g: 0x33, b: 0x66, a: 0xFF, id: 96 },
        Colour { r: 0x66, g: 0x33, b: 0x99, a: 0xFF, id: 97 },
        Colour { r: 0x66, g: 0x33, b: 0xCC, a: 0xFF, id: 98 },
        Colour { r: 0x66, g: 0x33, b: 0xFF, a: 0xFF, id: 99 },
        Colour { r: 0x66, g: 0x66, b: 0x00, a: 0xFF, id: 100 },
        Colour { r: 0x66, g: 0x66, b: 0x33, a: 0xFF, id: 101 },
        Colour { r: 0x66, g: 0x66, b: 0x66, a: 0xFF, id: 102 },
        Colour { r: 0x66, g: 0x66, b: 0x99, a: 0xFF, id: 103 },
        Colour { r: 0x66, g: 0x66, b: 0xCC, a: 0xFF, id: 104 },
        Colour { r: 0x66, g: 0x66, b: 0xFF, a: 0xFF, id: 105 },
        Colour { r: 0x66, g: 0x99, b: 0x00, a: 0xFF, id: 106 },
        Colour { r: 0x66, g: 0x99, b: 0x33, a: 0xFF, id: 107 },
        Colour { r: 0x66, g: 0x99, b: 0x66, a: 0xFF, id: 108 },
        Colour { r: 0x66, g: 0x99, b: 0x99, a: 0xFF, id: 109 },
        Colour { r: 0x66, g: 0x99, b: 0xCC, a: 0xFF, id: 110 },
        Colour { r: 0x66, g: 0x99, b: 0xFF, a: 0xFF, id: 111 },
        Colour { r: 0x66, g: 0xCC, b: 0x00, a: 0xFF, id: 112 },
        Colour { r: 0x66, g: 0xCC, b: 0x33, a: 0xFF, id: 113 },
        Colour { r: 0x66, g: 0xCC, b: 0x66, a: 0xFF, id: 114 },
        Colour { r: 0x66, g: 0xCC, b: 0x99, a: 0xFF, id: 115 },
        Colour { r: 0x66, g: 0xCC, b: 0xCC, a: 0xFF, id: 116 },
        Colour { r: 0x66, g: 0xCC, b: 0xFF, a: 0xFF, id: 117 },
        Colour { r: 0x66, g: 0xFF, b: 0x00, a: 0xFF, id: 118 },
        Colour { r: 0x66, g: 0xFF, b: 0x33, a: 0xFF, id: 119 },
        Colour { r: 0x66, g: 0xFF, b: 0x66, a: 0xFF, id: 120 },
        Colour { r: 0x66, g: 0xFF, b: 0x99, a: 0xFF, id: 121 },
        Colour { r: 0x66, g: 0xFF, b: 0xCC, a: 0xFF, id: 122 },
        Colour { r: 0x66, g: 0xFF, b: 0xFF, a: 0xFF, id: 123 },
        Colour { r: 0x99, g: 0x00, b: 0x00, a: 0xFF, id: 124 },
        Colour { r: 0x99, g: 0x00, b: 0x33, a: 0xFF, id: 125 },
        Colour { r: 0x99, g: 0x00, b: 0x66, a: 0xFF, id: 126 },
        Colour { r: 0x99, g: 0x00, b: 0x99, a: 0xFF, id: 127 },
        Colour { r: 0x99, g: 0x00, b: 0xCC, a: 0xFF, id: 128 },
        Colour { r: 0x99, g: 0x00, b: 0xFF, a: 0xFF, id: 129 },
        Colour { r: 0x99, g: 0x33, b: 0x00, a: 0xFF, id: 130 },
        Colour { r: 0x99, g: 0x33, b: 0x33, a: 0xFF, id: 131 },
        Colour { r: 0x99, g: 0x33, b: 0x66, a: 0xFF, id: 132 },
        Colour { r: 0x99, g: 0x33, b: 0x99, a: 0xFF, id: 133 },
        Colour { r: 0x99, g: 0x33, b: 0xCC, a: 0xFF, id: 134 },
        Colour { r: 0x99, g: 0x33, b: 0xFF, a: 0xFF, id: 135 },
        Colour { r: 0x99, g: 0x66, b: 0x00, a: 0xFF, id: 136 },
        Colour { r: 0x99, g: 0x66, b: 0x33, a: 0xFF, id: 137 },
        Colour { r: 0x99, g: 0x66, b: 0x66, a: 0xFF, id: 138 },
        Colour { r: 0x99, g: 0x66, b: 0x99, a: 0xFF, id: 139 },
        Colour { r: 0x99, g: 0x66, b: 0xCC, a: 0xFF, id: 140 },
        Colour { r: 0x99, g: 0x66, b: 0xFF, a: 0xFF, id: 141 },
        Colour { r: 0x99, g: 0x99, b: 0x00, a: 0xFF, id: 142 },
        Colour { r: 0x99, g: 0x99, b: 0x33, a: 0xFF, id: 143 },
        Colour { r: 0x99, g: 0x99, b: 0x66, a: 0xFF, id: 144 },
        Colour { r: 0x99, g: 0x99, b: 0x99, a: 0xFF, id: 145 },
        Colour { r: 0x99, g: 0x99, b: 0xCC, a: 0xFF, id: 146 },
        Colour { r: 0x99, g: 0x99, b: 0xFF, a: 0xFF, id: 147 },
        Colour { r: 0x99, g: 0xCC, b: 0x00, a: 0xFF, id: 148 },
        Colour { r: 0x99, g: 0xCC, b: 0x33, a: 0xFF, id: 149 },
        Colour { r: 0x99, g: 0xCC, b: 0x66, a: 0xFF, id: 150 },
        Colour { r: 0x99, g: 0xCC, b: 0x99, a: 0xFF, id: 151 },
        Colour { r: 0x99, g: 0xCC, b: 0xCC, a: 0xFF, id: 152 },
        Colour { r: 0x99, g: 0xCC, b: 0xFF, a: 0xFF, id: 153 },
        Colour { r: 0x99, g: 0xFF, b: 0x00, a: 0xFF, id: 154 },
        Colour { r: 0x99, g: 0xFF, b: 0x33, a: 0xFF, id: 155 },
        Colour { r: 0x99, g: 0xFF, b: 0x66, a: 0xFF, id: 156 },
        Colour { r: 0x99, g: 0xFF, b: 0x99, a: 0xFF, id: 157 },
        Colour { r: 0x99, g: 0xFF, b: 0xCC, a: 0xFF, id: 158 },
        Colour { r: 0x99, g: 0xFF, b: 0xFF, a: 0xFF, id: 159 },
        Colour { r: 0xCC, g: 0x00, b: 0x00, a: 0xFF, id: 160 },
        Colour { r: 0xCC, g: 0x00, b: 0x33, a: 0xFF, id: 161 },
        Colour { r: 0xCC, g: 0x00, b: 0x66, a: 0xFF, id: 162 },
        Colour { r: 0xCC, g: 0x00, b: 0x99, a: 0xFF, id: 163 },
        Colour { r: 0xCC, g: 0x00, b: 0xCC, a: 0xFF, id: 164 },
        Colour { r: 0xCC, g: 0x00, b: 0xFF, a: 0xFF, id: 165 },
        Colour { r: 0xCC, g: 0x33, b: 0x00, a: 0xFF, id: 166 },
        Colour { r: 0xCC, g: 0x33, b: 0x33, a: 0xFF, id: 167 },
        Colour { r: 0xCC, g: 0x33, b: 0x66, a: 0xFF, id: 168 },
        Colour { r: 0xCC, g: 0x33, b: 0x99, a: 0xFF, id: 169 },
        Colour { r: 0xCC, g: 0x33, b: 0xCC, a: 0xFF, id: 170 },
        Colour { r: 0xCC, g: 0x33, b: 0xFF, a: 0xFF, id: 171 },
        Colour { r: 0xCC, g: 0x66, b: 0x00, a: 0xFF, id: 172 },
        Colour { r: 0xCC, g: 0x66, b: 0x33, a: 0xFF, id: 173 },
        Colour { r: 0xCC, g: 0x66, b: 0x66, a: 0xFF, id: 174 },
        Colour { r: 0xCC, g: 0x66, b: 0x99, a: 0xFF, id: 175 },
        Colour { r: 0xCC, g: 0x66, b: 0xCC, a: 0xFF, id: 176 },
        Colour { r: 0xCC, g: 0x66, b: 0xFF, a: 0xFF, id: 177 },
        Colour { r: 0xCC, g: 0x99, b: 0x00, a: 0xFF, id: 178 },
        Colour { r: 0xCC, g: 0x99, b: 0x33, a: 0xFF, id: 179 },
        Colour { r: 0xCC, g: 0x99, b: 0x66, a: 0xFF, id: 180 },
        Colour { r: 0xCC, g: 0x99, b: 0x99, a: 0xFF, id: 181 },
        Colour { r: 0xCC, g: 0x99, b: 0xCC, a: 0xFF, id: 182 },
        Colour { r: 0xCC, g: 0x99, b: 0xFF, a: 0xFF, id: 183 },
        Colour { r: 0xCC, g: 0xCC, b: 0x00, a: 0xFF, id: 184 },
        Colour { r: 0xCC, g: 0xCC, b: 0x33, a: 0xFF, id: 185 },
        Colour { r: 0xCC, g: 0xCC, b: 0x66, a: 0xFF, id: 186 },
        Colour { r: 0xCC, g: 0xCC, b: 0x99, a: 0xFF, id: 187 },
        Colour { r: 0xCC, g: 0xCC, b: 0xCC, a: 0xFF, id: 188 },
        Colour { r: 0xCC, g: 0xCC, b: 0xFF, a: 0xFF, id: 189 },
        Colour { r: 0xCC, g: 0xFF, b: 0x00, a: 0xFF, id: 190 },
        Colour { r: 0xCC, g: 0xFF, b: 0x33, a: 0xFF, id: 191 },
        Colour { r: 0xCC, g: 0xFF, b: 0x66, a: 0xFF, id: 192 },
        Colour { r: 0xCC, g: 0xFF, b: 0x99, a: 0xFF, id: 193 },
        Colour { r: 0xCC, g: 0xFF, b: 0xCC, a: 0xFF, id: 194 },
        Colour { r: 0xCC, g: 0xFF, b: 0xFF, a: 0xFF, id: 195 },
        Colour { r: 0xFF, g: 0x00, b: 0x00, a: 0xFF, id: 196 },
        Colour { r: 0xFF, g: 0x00, b: 0x33, a: 0xFF, id: 197 },
        Colour { r: 0xFF, g: 0x00, b: 0x66, a: 0xFF, id: 198 },
        Colour { r: 0xFF, g: 0x00, b: 0x99, a: 0xFF, id: 199 },
        Colour { r: 0xFF, g: 0x00, b: 0xCC, a: 0xFF, id: 200 },
        Colour { r: 0xFF, g: 0x00, b: 0xFF, a: 0xFF, id: 201 },
        Colour { r: 0xFF, g: 0x33, b: 0x00, a: 0xFF, id: 202 },
        Colour { r: 0xFF, g: 0x33, b: 0x33, a: 0xFF, id: 203 },
        Colour { r: 0xFF, g: 0x33, b: 0x66, a: 0xFF, id: 204 },
        Colour { r: 0xFF, g: 0x33, b: 0x99, a: 0xFF, id: 205 },
        Colour { r: 0xFF, g: 0x33, b: 0xCC, a: 0xFF, id: 206 },
        Colour { r: 0xFF, g: 0x33, b: 0xFF, a: 0xFF, id: 207 },
        Colour { r: 0xFF, g: 0x66, b: 0x00, a: 0xFF, id: 208 },
        Colour { r: 0xFF, g: 0x66, b: 0x33, a: 0xFF, id: 209 },
        Colour { r: 0xFF, g: 0x66, b: 0x66, a: 0xFF, id: 210 },
        Colour { r: 0xFF, g: 0x66, b: 0x99, a: 0xFF, id: 211 },
        Colour { r: 0xFF, g: 0x66, b: 0xCC, a: 0xFF, id: 212 },
        Colour { r: 0xFF, g: 0x66, b: 0xFF, a: 0xFF, id: 213 },
        Colour { r: 0xFF, g: 0x99, b: 0x00, a: 0xFF, id: 214 },
        Colour { r: 0xFF, g: 0x99, b: 0x33, a: 0xFF, id: 215 },
        Colour { r: 0xFF, g: 0x99, b: 0x66, a: 0xFF, id: 216 },
        Colour { r: 0xFF, g: 0x99, b: 0x99, a: 0xFF, id: 217 },
        Colour { r: 0xFF, g: 0x99, b: 0xCC, a: 0xFF, id: 218 },
        Colour { r: 0xFF, g: 0x99, b: 0xFF, a: 0xFF, id: 219 },
        Colour { r: 0xFF, g: 0xCC, b: 0x00, a: 0xFF, id: 220 },
        Colour { r: 0xFF, g: 0xCC, b: 0x33, a: 0xFF, id: 221 },
        Colour { r: 0xFF, g: 0xCC, b: 0x66, a: 0xFF, id: 222 },
        Colour { r: 0xFF, g: 0xCC, b: 0x99, a: 0xFF, id: 223 },
        Colour { r: 0xFF, g: 0xCC, b: 0xCC, a: 0xFF, id: 224 },
        Colour { r: 0xFF, g: 0xCC, b: 0xFF, a: 0xFF, id: 225 },
        Colour { r: 0xFF, g: 0xFF, b: 0x00, a: 0xFF, id: 226 },
        Colour { r: 0xFF, g: 0xFF, b: 0x33, a: 0xFF, id: 227 },
        Colour { r: 0xFF, g: 0xFF, b: 0x66, a: 0xFF, id: 228 },
        Colour { r: 0xFF, g: 0xFF, b: 0x99, a: 0xFF, id: 229 },
        Colour { r: 0xFF, g: 0xFF, b: 0xCC, a: 0xFF, id: 230 },
        Colour { r: 0xFF, g: 0xFF, b: 0xFF, a: 0xFF, id: 231 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 232 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 233 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 234 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 235 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 236 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 237 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 238 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 239 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 240 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 241 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 242 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 243 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 244 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 245 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 246 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 247 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 248 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 249 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 250 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 251 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 252 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 253 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 254 },
        Colour { r: 0x00, g: 0x00, b: 0x00, a: 0xFF, id: 255 },
    ];
}

impl Default for Colour {
    fn default() -> Self {
        Colour::GREY
    }
}

impl From<u8> for Colour {
    fn from(color_id: u8) -> Self {
        Colour::new_by_id(color_id)
    }
}

impl From<Colour> for u8 {
    fn from(color: Colour) -> Self {
        color.id
    }
}

impl From<u32> for Colour {
    fn from(val: u32) -> Self {
        let b = val.to_le_bytes();
        Colour::new_by_rgba(b[0], b[1], b[2], b[3])
    }
}
